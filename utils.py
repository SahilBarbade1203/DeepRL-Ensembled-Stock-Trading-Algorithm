{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNloAFSDtxfzcuSS5frnArA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"DyWIlBQpRVQz"},"outputs":[],"source":["#creating states, environments and required preprocessing\n","import tqdm\n","from tqdm import tqdm\n","\n","def sigmoid(x):\n","    return 1 / (1 + math.exp(-x))\n","\n","# returns an an n-day state representation ending at time t\n","\n","def getState(data, t, n):\n","    d = t - n + 1\n","    block = data[d:t + 1] if d >= 0 else -d * [data[0]] + data[0:t + 1] # pad with t0\n","    #block is which is the for [1283.27002, 1283.27002]\n","    res = []\n","    for i in range(n - 1):\n","        res.append(sigmoid(block[i + 1] - block[i]))\n","    return np.array([res])\n","\n","# Plots the behavior of the output\n","def plot_behavior(data_input, states_buy, states_sell, profit):\n","    fig = plt.figure(figsize = (15,5))\n","    plt.plot(data_input, color='r', lw=2.)\n","    plt.plot(data_input, '^', markersize=10, color='m', label = 'Buying signal', markevery = states_buy)\n","    plt.plot(data_input, 'v', markersize=10, color='k', label = 'Selling signal', markevery = states_sell)\n","    plt.title('Total gains: %f'%(profit))\n","    plt.legend()\n","    #plt.savefig('output/'+name+'.png')\n","    plt.show()"]}]}